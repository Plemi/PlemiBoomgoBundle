<?php

namespace Plemi\Bundle\BoomgoBundle\Tests\Mapper;

use Boomgo\Mapper\MapperProvider,
    Boomgo\Mapper\MapperInterface;

/**
 * AnnotationMapper
 *
 * Auto generated Mapper class for/by Boomgo
 * Do not edit this file
 *
 * @author  Boomgo\Generator\MapperGenerator
 */
class AnnotationMapper extends MapperProvider implements MapperInterface
{
    /**
     * Unserialize a MongoDB array to an object
     *
     * Return an hydrated object from a MongoDB array
     *
     * @param  array  $data MongoDB result array (a document)
     *
     * @return \Plemi\Bundle\BoomgoBundle\Tests\Document\Annotation
     */
    public function unserialize(array $data)
    {
        $object = new \Plemi\Bundle\BoomgoBundle\Tests\Document\Annotation();
        $this->hydrate($object, $data);

        return $object;
    }

    /**
     * Serialize an object to a MongoDB array
     *
     * Return an Mongo-able array from a Php object
     *
     * @param  \Plemi\Bundle\BoomgoBundle\Tests\Document\Annotation $object
     *
     * @return array
     */
    public function serialize($object)
    {
        if (!$object instanceof \Plemi\Bundle\BoomgoBundle\Tests\Document\Annotation) {
            throw new \InvalidArgumentException('Serialize expect an instance of "\Plemi\Bundle\BoomgoBundle\Tests\Document\Annotation"');
        }

        $data = array();
        
        $value = $object->getNovar();
        if (null != $value && !empty($value)) {
            $data['novar'] = $this->normalize($value);
        }
        
        $value = $object->getTypeDescription();
        if (null != $value && !empty($value)) {
            $data['typeDescription'] = $value;
        }
        
        $value = $object->getDocument();
        if (null != $value && !empty($value)) {
            $mapper = new \Plemi\Bundle\BoomgoBundle\Tests\Mapper\EmbedAnnotationMapper();
            $data['document'] = $mapper->serialize($value);
        }
        
        return $data;
    }

    /**
     * Hydrate an object from a MongoDb array
     *
     * @param  \Plemi\Bundle\BoomgoBundle\Tests\Document\Annotation $object
     * @param  array $data MongoDB result array (a document)
     */
    public function hydrate($object, array $data)
    {
        if (!$object instanceof \Plemi\Bundle\BoomgoBundle\Tests\Document\Annotation) {
            throw new \InvalidArgumentException('Serialize expect an instance of "\Plemi\Bundle\BoomgoBundle\Tests\Document\Annotation"');
        }
        
        if (isset($data['novar'])) {
            $object->setNovar($data['novar']);
        }
        
        if (isset($data['typeDescription'])) {
            $object->setTypeDescription($data['typeDescription']);
        }
        
        if (isset($data['document'])) {
            $mapper = new \Plemi\Bundle\BoomgoBundle\Tests\Mapper\EmbedAnnotationMapper();
            $embeddedObject = $mapper->unserialize($data['document']);
            $object->setDocument($embeddedObject);
        }
        
    }
}